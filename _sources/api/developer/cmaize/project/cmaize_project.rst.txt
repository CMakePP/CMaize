
#############################
cmaize.project/cmaize_project
#############################

.. module:: cmaize.project/cmaize_project


.. py:class:: CMaizeProject

   The ``CMaizeProject`` provides a workspace to collect information about a
   project, using that information to build and package the project.
   
   This object will **not** create a CMake project if one does not already
   exist.
   
   **Usage:**
   
   A ``CMaizeProject`` object will be automatically created for the current
   when CMaize is included in a ``CMakeLists.txt`` file if a ``project()``
   call has already been made. This project should not be created manually
   in most cases.
   
   To retrieve an existing project object, call:
   
   .. code-block:: cmake
   
      cpp_get_global(result_object CMAIZE_PROJECT_<project_name>)
   
   **Additional Constructors**

   .. py:method:: CTOR(_ctor_name[, ...])

      Creates a ``CMaizeProject`` object. A CMake project of the same name
      must already be created through a ``project()`` call and must be
      the active project.
      
      :param self: The constructed object.
      :type self: CMaizeProject*
      :param _ctor_name: Name of the project. Must match the active project
                         named in ``PROJECT_NAME``.
      :type _ctor_name: desc
      
      :Keyword Arguments:
         * **LANGUAGES** (*list[desc]*) --
           Languages supported by the project. These languages are passed to
           the LANGUAGES keyword of the CMake ``project()`` call if the project
           does not exist yet.
      
      :raises ProjectNotFound: The active CMake project does not match the
                               given project name.
      
      :returns: ``self`` will be set to the newly constructed
                ``CMaizeProject`` object.
      :rtype: CMaizeProject
      
      .. Reference definitions
      .. _cmake_project: https://cmake.org/cmake/help/latest/command/project.html
      

   **Methods**

   .. py:method:: add_language(_al_language)

      Add a language to the project. Duplicate languages will be removed.
      
      :param self: CMaizeProject object.
      :type self: CMaizeProject
      :param _al_language: Language to be added.
      :type _al_language: desc
      


   .. py:method:: set_config_option(_sco_name, _sco_value)

      Sets the value of the specified configuration option
      
      This method is a convience function for retrieving the
      PackageSpecification associated with self and then setting the value of
      the specified configuration option.
      
      :param self: The current ``CMaizeProject`` object.
      :type self: CMaizeProject
      :param name: The key for the configuration option.
      :type name: desc
      :param value: The value to set the configuration option to.
      :type value: str
      
      

      :param _sco_name: 

      :type _sco_name: desc

      :param _sco_value: 

      :type _sco_value: str


   .. py:method:: get_config_option(_gco_value, _gco_name)

      Gets the value of a configuration option.
      
      This method is a convenience function for retrieving the
      PackageSpecification associated with self and then getting the value of
      the specificed configuration option.
      
      :param self: The current ``CMaizeProject`` object.
      :type self: CMaizeProject
      :param value: The variable which will hold the option's value
      :type value: str
      :param name: The configuration option whose value has been requested.
      :type name: desc
      
      :raises KeyError: If ``name`` is not a configuration option which has been
                        added via ``set_config_option``. Strong throw guarantee.
      

      :param _gco_value: 

      :type _gco_value: str

      :param _gco_name: 

      :type _gco_name: desc


   .. py:method:: has_config_option(_hco_result, _hco_name)

      Determines if a configuration option was added to self.
      
      This method is a convenience function for getting the internal
      PackageSpecification and seeinf if the user set a specified key. If the
      user set ``name``, ``result`` will be set to true; otherwise, ``result``
      will be false.
      
      :param self: ``CMaizeProject`` object.
      :type self: CMaizeProject
      :param result: The identifier to assign the result to.
      :type result: bool*
      :param name: The name of the configuration option
      :type name: desc
      

      :param _hco_result: 

      :type _hco_result: bool*

      :param _hco_name: 

      :type _hco_name: desc


   .. py:method:: add_package_manager(_apm_pm)

      Add a package manager to the project. Duplicate package manager types
      will not be added.
      
      :param self: CMaizeProject object.
      :type self: CMaizeProject
      :param _apm_pm: Package manager object to be added.
      :type _apm_pm: Package manager
      


   .. py:method:: add_target(_at_target_name, _at_target[, ...])

      Add a target to the project. Duplicate objects will be removed.
      
      :param _at_target_name: Identifying name for the target. This can match
                              name of either the CMake target or CMaizeTarget
                              object, but is required to do match them.
      :type _at_target_name: desc
      :param _at_target: CMaizeTarget object to be added.
      :type _at_target: CMaizeTarget
      :param **kwargs: Additional keyword arguments may be necessary.
      
      :Keyword Arguments:
         * **INSTALLED** (*bool*) --
           Flag to indicate that the target being added is already installed
           on the system.
         * **NAME** (*desc* or *target*) --
           Identifying name for the target. This can match name of either the
           CMake target or CMaizeTarget object, but is required to do match
           them. This keyword argument is **required**.
      


   .. py:method:: check_package_manager(_cpm_found, _cpm_pm_type)

      Checks if a package manager with the same type is already added to
      this project.
      
      :param self: CMaizeProject object.
      :type self: CMaizeProject
      :param _cpm_found: Return variable for if the package manager was found.
      :type _cpm_found: bool*
      :param _cpm_tgt: Package manager to search for.
      :type _cpm_tgt: Package manager
      
      :returns: Package manager found (TRUE) or not (FALSE).
      :rtype: bool
      

      :param _cpm_pm_type: 

      :type _cpm_pm_type: str


   .. py:method:: check_target(_ct_found, _ct_target_name[, ...])

      Checks if a target with the same name is already added to this project.
      
      :param _ct_found: Return variable for if the target was found.
      :type _ct_found: bool*
      :param _ct_target_name: Identifying name for the target. This can match
                              name of either the CMake target or CMaizeTarget
                              object, but is required to do match them.
      :type _ct_target_name: desc
      :param **kwargs: Additional keyword arguments may be necessary.
      
      :Keyword Arguments:
         * **INSTALLED** (*bool*) --
           Flag to indicate that the installed targets should be checked.
         * **ALL** (*bool*) --
           Flag to indicate that both the build and installed targets should
           be checked.
         * **NAME** (*desc* or *target*) --
           Identifying name for a target contained in the current Cmaize
           project. This keyword argument is **required**.
      
      :returns: CMaizeTarget found (TRUE) or not (FALSE).
      :rtype: bool
      


   .. py:method:: get_package_manager(_gpm_result, _gpm_pm_type)

      Get a package manager of the requested type stored in the project.
      
      :param _gpm_result: Return variable for the package manager object.
      :type _gpm_result: PackageManager*
      :param _gpm_pm_type: Type of package manager to retrieve. See
                           ``CMAIZE_SUPPORTED_PACKAGE_MANAGERS`` for the list
                           of supported package manager types.
      :type _gpm_pm_type: desc
      
      :returns: Requested package manager object, or an empty string ("") if
                no package manager with the matching type was found.
      :rtype: PackageManager
      


   .. py:method:: get_target(_gt_result, _gt_target_name[, ...])

      Get a CMaizeTarget with the requested identifying name stored in the project.
      
      :param _gt_result: Return variable for the CMaizeTarget object.
      :type _gt_result: CMaizeTarget*
      :param _gt_target_name: Identifying name of the target to retrieve. This
                              should match the name provided during the
                              ``CMaizeProject(add_target`` call.
      :type _gt_target_name: desc
      :param **kwargs: Additional keyword arguments may be necessary.
      
      :Keyword Arguments:
         * **INSTALLED** (*bool*) --
           Flag to indicate that the installed targets should be searched.
         * **NAME** (*desc* or *target*) --
           Identifying name for a target contained in the current Cmaize
           project. This keyword argument is **required**.
      
      :returns: Requested target object, or an empty string ("") if
                no target with the matching type was found.
      :rtype: CMaizeTarget
      


   .. py:method:: _get_target(__gt_result[, ...])

      Get a CMaizeTarget with the requested identifying name stored in the project.
      
      This internal implementation exists so a required keyword argument is
      not part of the public interface, as well as to handle both ``desc`` and
      ``target`` types. Both types are effectively strings representing target
      names in this algorithm and can be treated equivalently, but cannot be
      typecast to each other by CMakePPLang. The CMakePPLang type checking
      is bypassed through the aforementioned required keyword argument for
      the target name, essentially combining the two types.
      
      :param __gt_result: Return variable for the resulting target.
      :type __gt_result: CMaizeTarget*
      :param NAME: Required keyword argument. See description below.
      :type NAME: desc or target
      :param **kwargs: Additional keyword arguments may be necessary.
      
      :Keyword Arguments:
         * **INSTALLED** (*bool*) --
           Flag to indicate that the installed targets should be searched.
         * **NAME** (*desc* or *target*) --
           Identifying name for a target contained in the current Cmaize
           project. This keyword argument is **required**.
      
      :returns: Requested target object, or an empty string ("") if
                no target with the matching type was found.
      :rtype: CMaizeTarget
      

   **Attributes**

   .. py:attribute:: name

      :type: desc
      
      Name of the project.
      


   .. py:attribute:: specification

      :type: PackageSpecification
      
      Details about the project.
      


   .. py:attribute:: languages

      :type: list[desc]
      
      Languages used in the project. Defaults to an empty list.
      


   .. py:attribute:: package_managers

      :type: list[PackageManager]
      
      Package managers used by the project.
      


   .. py:attribute:: build_targets

      :type: list[BuildTarget]
      
      Targets that will be built as part of the project.
      


   .. py:attribute:: installed_targets

      :type: list[InstalledTarget]
      
      Targets the project uses that are already installed on the system.
      


