
######################
cmaize.project/project
######################

.. module:: cmaize.project/project


.. py:class:: CMaizeProject

   The ``CMaizeProject`` provides a workspace to collect information about a
   project, using that information to build and package the project.
   
   This object will **not** create a CMake project if one does not already
   exist.
   
   **Usage:**
   
   A ``CMaizeProject`` object will be automatically created for the current
   when CMaize is included in a ``CMakeLists.txt`` file if a ``project()``
   call has already been made. This project should not be created manually
   in most cases.
   
   To retrieve an existing project object, call:
   
   .. code-block:: cmake
   
      cpp_get_global(result_object CMAIZE_PROJECT_<project_name>)
   
   **Additional Constructors**

   .. py:method:: CTOR(_ctor_name[, ...])

      Creates a ``CMaizeProject`` object. A CMake project of the same name
      must already be created through a ``project()`` call and must be
      the active project.
      
      :param self: The constructed object.
      :type self: CMaizeProject
      :param _ctor_name: Name of the project. Must match the active project
                         named in ``PROJECT_NAME``.
      :type _ctor_name: desc
      
      :Keyword Arguments:
         * **VERSION** (*desc*) --
           Version string of non-negative integers of the form
           ``<major>[.<minor>[.<patch>[.<tweak>] ] ]``. Populates the
           version attributes of the ``ProjectSpecification``. Parallels
           the ``VERSION <version>`` keyword for CMake ``project()``
           (`link <cmake_project_>`__), and the value is passed to
           a CMake ``project()`` call if the project does not exist yet.
         * **DESCRIPTION** (*desc*) --
           Description of the project. Parallels the 
           ``DESCRIPTION <project-description-string>`` keyword for 
           CMake ``project()`` (`link <cmake_project_>`__), and the value
           is passed to a CMake ``project()`` call if the project does not
           exist yet.
         * **HOMEPAGE_URL** (*desc*) --
           Homepage URL for the project. Parallels the
           ``HOMEPAGE_URL <url-string>`` keyword for CMake ``project()``
           (`link <cmake_project_>`__), and the value is passed to
           a CMake ``project()`` call if the project does not exist yet.
         * **LANGUAGES** (*list[desc]*) --
           Languages supported by the project. These languages are passed to
           the LANGUAGES keyword of the CMake ``project()`` call if the project
           does not exist yet.
      
      :raises ProjectNotFound: The active CMake project does not match the
                               given project name.
      
      :returns: ``self`` will be set to the newly constructed
                ``CMaizeProject`` object.
      :rtype: CMaizeProject
      
      .. Reference definitions
      .. _cmake_project: https://cmake.org/cmake/help/latest/command/project.html
      

   **Methods**

   .. py:method:: add_language(_al_language)

      Add a language to the project. Duplicate languages will be removed.
      
      :param self: CMaizeProject object.
      :type self: CMaizeProject
      :param _al_language: Language to be added.
      :type _al_language: desc
      


   .. py:method:: add_package_manager(_apm_pm)

      Add a package manager to the project. Duplicate package manager types
      will not be added.
      
      :param self: CMaizeProject object.
      :type self: CMaizeProject
      :param _apm_pm: Package manager object to be added.
      :type _apm_pm: Package manager
      


   .. py:method:: add_target(_at_target[, ...])

      Add a target to the project. Duplicate objects will be removed.
      
      :param self: CMaizeProject object.
      :type self: CMaizeProject
      :param _at_target: CMaizeTarget object to be added.
      :type _at_target: CMaizeTarget
      
      :Keyword Arguments:
         * **INSTALLED** (*bool*) --
           Flag to indicate that the target being added is already installed
           on the system.
      


   .. py:method:: check_package_manager(_cpm_found, _cpm_pm)

      Checks if a package manager with the same type is already added to
      this project.
      
      :param self: CMaizeProject object.
      :type self: CMaizeProject
      :param cpm_found: Return variable for if the package manager was found.
      :type cpm_found: bool*
      :param cpm_tgt: Package manager to search for.
      :type cpm_tgt: Package manager
      
      :returns: Package manager found (TRUE) or not (FALSE).
      :rtype: bool
      

      :param _cpm_found: 

      :type _cpm_found: desc

      :param _cpm_pm: 

      :type _cpm_pm: PackageManager


   .. py:method:: check_target(_ct_found, _ct_tgt)

      Checks if a target with the same name is already added to this project.
      
      This checks both the build and installed target lists.
      
      :param self: CMaizeProject object.
      :type self: CMaizeProject
      :param _ct_found: Return variable for if the target was found.
      :type _ct_found: bool*
      :param _ct_tgt: Target to search for.
      :type _ct_tgt: CMaizeTarget
      
      :returns: Target found (TRUE) or not (FALSE).
      :rtype: bool
      

   **Attributes**

   .. py:attribute:: name

      :type: desc
      
      Name of the project.
      


   .. py:attribute:: specification

      :type: ProjectSpecification
      
      Details about the project.
      


   .. py:attribute:: languages

      :type: list[desc]
      
      Languages used in the project. Defaults to an empty list.
      


   .. py:attribute:: package_managers

      :type: list[PackageManager]
      
      Package managers used by the project.
      


   .. py:attribute:: build_targets

      :type: list[BuildTarget]
      
      Targets that will be built as part of the project.
      


   .. py:attribute:: installed_targets

      :type: list[InstalledTarget]
      
      Targets the project uses that are already installed on the system.
      


