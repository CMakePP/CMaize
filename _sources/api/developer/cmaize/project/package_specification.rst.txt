
####################################
cmaize.project/package_specification
####################################

.. module:: cmaize.project/package_specification


.. py:class:: PackageSpecification

   The ``PackageSpecification`` class is envisioned as holding all of the
   details about how to build a package ("package" being a catchall for a
   dependency or the project that the CMaize build system is being written
   for). This includes things like where the source code lives, the version
   to build, and specific options for configuring and compiling.
   ``PackageSpecification`` instances will ultimately be used to request
   packages from the ``PackageManager``.
   
   **Additional Constructors**

   .. py:method:: CTOR()

      Default constructor for PackageSpecification object with only
      autopopulated options available.
      
      :param self: PackageSpecification object constructed.
      :type self: PackageSpecification
      :returns: ``self`` will be set to the newly constructed
                ``PackageSpecification`` object.
      :rtype: PackageSpecification
      

   **Methods**

   .. py:method:: hash(return_hash, hash_type)

      Hash the object using the provided hashing algorithm string.
      
      Supported hashing algorithms are specified by the CMake
      ``string(<HASH>`` function defined `here
      <https://cmake.org/cmake/help/latest/command/string.html#hashing>`__.
      
      :param self: ``PackageSpecification`` object to hash.
      :type self: PackageSpecification
      :param return_hash: Hashed ``PackageSpecification``
      :type return_hash: str
      :param hash_type: Hash algorithm to use
      :type hash_type: str
      
      :returns: Hashed ``PackageSpecification`` object
      :rtype: str
      


   .. py:method:: set_version()

      Overload to ``set_version()`` method to catch when the package version
      string is blank.
      
      .. note::
         
         This override is required because of a bug in CMakePPLang.
         Currently, CMakePPLang cannot differentiate between
         ``PackageSpecification(set_version "${ps_obj}")`` and 
         ``PackageSpecification(set_version "${ps_obj}" "")``. Sometimes the
         ``PROJECT_VERSION`` variable used in ``__initialize`` to determine
         a default package version is blank, so this ensures we do not get
         an error about not including the version argument for
         ``cpp_member(set_version PackageSpecification str)`` calls.
      
      :param self: ``PackageSpecification`` object.
      :type self: PackageSpecification
      


   .. py:method:: set_version(package_version)

      Set the package version variable and splits the version into 
      major, minor, patch, and tweak components.
      
      :param self: ``PackageSpecification`` object.
      :type self: PackageSpecification
      :param package_version: Full package version string.
      :type package_version: str
      


   .. py:method:: __initialize()

      Initialize package attributes with default values.
      
      :param self: ``PackageSpecification`` object to initialize.
      :type self: PackageSpecification
      

   **Attributes**

   .. py:attribute:: name

      :type: str
      
      Name of package as a string.
      


   .. py:attribute:: version

      :type: str
      
      Version of package as a string.
      


   .. py:attribute:: major_version

      :type: str
      
      First version number component of the ``version`` attribute.
      


   .. py:attribute:: minor_version

      :type: str
      
      Second version number component of the ``version`` attribute.
      


   .. py:attribute:: patch_version

      :type: str
      
      Third version number component of the ``version`` attribute.
      


   .. py:attribute:: tweak_version

      :type: str
      
      Fourth version number component of the ``version`` attribute.
      


   .. py:attribute:: build_type

      :type: str
      
      Specifies the build type.
      
      For the possible values provided by CMake and how to add custom build
      types, see `CMAKE_BUILD_TYPE 
      <https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html>`__.
      
      .. note::
      
         Currently, only single-configuration generators are supported since
         the ``build_type`` is based on ``CMAKE_BUILD_TYPE``. This could be
         expanded to multi-configuration generators later, although the
         build type will need to be determined at build time instead of
         configure time. See `CMAKE_CONFIGURATION_TYPES 
         <https://cmake.org/cmake/help/latest/variable/CMAKE_CONFIGURATION_TYPES.html#variable:CMAKE_CONFIGURATION_TYPES>`__
         and `CMake Build Configurations 
         <https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#build-configurations>`__
         for more information on the details of making this switch.
      


   .. py:attribute:: toolchain

      :type: Toolchain
      
      User-specified and autopopulated toolchain file values.
      


   .. py:attribute:: configure_options

      :type: cpp_map
      
      Package configure options.
      
      This is initialized to an empty map for users to fill.
      


   .. py:attribute:: compile_options

      :type: cpp_map
      
      Package compile options.
      
      This is initialized to an empty map for users to fill.
      


