
############################
cmaize.targets/cmaize_target
############################

.. module:: cmaize.targets/cmaize_target


.. py:class:: CMaizeTarget

   Base class for an entire hierarchy of build and install target classes.
   
   **Additional Constructors**

   .. py:method:: CTOR(_ctor_name)

      Creates a ``CMaizeTarget`` object to manage a target of the given name.
      
      .. note::
         
         This does not create a corresponding CMake target,
         so any call that should interact with a target will fail if the
         target does not already exist. As a base class with no concrete
         analog, ``CMaizeTarget`` really shouldn't be instantiated aside from
         testing purposes. Instead, create a child with a concrete target
         analog and instantiate that.
      
      :param self: CMaizeTarget object constructed.
      :type self: CMaizeTarget
      :param tgt_name: Name of the target. This should not duplicate any other
                       target name already in scope.
      :type tgt_name: desc or target
      
      :returns: ``self`` will be set to the newly constructed ``CMaizeTarget``
                object.
      :rtype: CMaizeTarget
      

      :param _ctor_name: 

      :type _ctor_name: str

   **Methods**

   .. py:method:: target(return_target)

      Get the CMake target name that the ``CMaizeTarget`` class represents.
      
      :param self: CMaizeTarget object
      :type self: CMaizeTarget
      :param return_target: Name of the CMake target.
      :type return_target: desc*
      
      :returns: Sets ``return_target`` to the name of the CMake target
                represented by this class.
      :rtype: desc
      


   .. py:method:: has_property(has_property, property_name)

      Check if the target has the requested property.
      
      :param self: CMaizeTarget object
      :type self: CMaizeTarget
      :param has_property: Return variable for if the target has the property.
      :type has_property: bool*
      :param property_name: Name of the property to check for.
      :type property_name: desc
      
      :returns: Sets ``has_property`` according to if the target has the
                requested property (True) or not (False).
      :rtype: bool*
      


   .. py:method:: get_property(property_value, property_name)

      Get the requested property for the ``CMaizeTarget``.
      
      :param self: CMaizeTarget object
      :type self: CMaizeTarget
      :param property_value: Return variable for the property value.
      :type property_value: str*
      :param property_name: Name of the property to check for.
      :type property_name: desc
      
      :returns: Sets ``property_value`` to the value of the property.
      :rtype: str
      
      :raises PropertyNotFound: Property does not exist in the target.
      


   .. py:method:: set_property(_sp_property_name[, ...])

      Sets a single property to the given value, creating the property if it
      does not exist.
      
      :param self: CMaizeTarget object
      :type self: CMaizeTarget
      :param _sp_property_name: Name of the property to set.
      :type _sp_property_name: desc
      :param args: Values of the property. This uses all additional
                   arguments provided to the function as the value
                   for the property.
                   TODO: Verify how to document this parameter properly
      :type args: args
      


   .. py:method:: set_properties(_sp_properties)

      Sets the given properties to the given values.
      
      .. note::
         
         Member functions in CMakePPLang cannot be variadic, so it is not
         possible to match the API for ``set_target_properties()``. However,
         using a ``cpp_map`` is close, so it was used. See the example usage
         below for a concise way of using this function.
      
      :param self: CMaizeTarget object
      :type self: CMaizeTarget
      :param _sp_properties: Property names and values.
      :type _sp_properties: cpp_map
      
      **Example Usage**
      
      .. code-block:: cmake
         
         # Create a target so the property functions have something to act on
         add_custom_target("example_target")
      
         # Create a CMaizeTarget object
         CMaizeTarget(CTOR my_tgt "example_target")
      
         # Assign properties using the cpp_map constructor with the optional
         # key-value pairs in the CTOR call
         cpp_map(CTOR
             property_map
             <property_name_1> <property_value_1>
             <property_name_2> <property_value_2>
             <property_name_3> <property_value_3>
             ...
         )
      
         # Set the properties on the target with this function
         CMaizeTarget(set_properties "${property_map}")
      

   **Attributes**

   .. py:attribute:: _name

      :type: str
      
      Name of the current target.
      


