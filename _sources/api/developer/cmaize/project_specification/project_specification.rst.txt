
########################################################
cmaize.project_specification/project_specification.cmake
########################################################

.. module:: cmaize.project_specification/project_specification.cmake


.. function:: cpp_class(ProjectSpecification)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   The ``ProjectSpecification`` class is envisioned as holding all of the
   details about how to build a project ("project" being a catchall for a
   dependency or the project that the CMaize build system is being written
   for). This includes things like where the source code lives, the version
   to build, and specific options for configuring and compiling.
   ``ProjectSpecification`` instances will ultimately be used to request
   packages from the ``PackageManager``.
   


.. function:: cpp_attr(ProjectSpecification name)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: str
   
   Name of project or dependency as a string.
   


.. function:: cpp_attr(ProjectSpecification version)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: str
   
   Version of project or dependency as a string.
   


.. function:: cpp_attr(ProjectSpecification major_version)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: str
   
   First version number component of the ``version`` attribute.
   


.. function:: cpp_attr(ProjectSpecification minor_version)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: str
   
   Second version number component of the ``version`` attribute.
   


.. function:: cpp_attr(ProjectSpecification patch_version)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: str
   
   Third version number component of the ``version`` attribute.
   


.. function:: cpp_attr(ProjectSpecification tweak_version)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: str
   
   Fourth version number component of the ``version`` attribute.
   


.. function:: cpp_attr(ProjectSpecification build_type)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: str
   
   Specifies the build type.
   
   For the possible values provided by CMake and how to add custom build
   types, see `CMAKE_BUILD_TYPE 
   <https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html>`__.
   
   .. note::
   
      Currently, only single-configuration generators are supported since
      the ``build_type`` is based on ``CMAKE_BUILD_TYPE``. This could be
      expanded to multi-configuration generators later, although the
      build type will need to be determined at build time instead of
      configure time. See `CMAKE_CONFIGURATION_TYPES 
      <https://cmake.org/cmake/help/latest/variable/CMAKE_CONFIGURATION_TYPES.html#variable:CMAKE_CONFIGURATION_TYPES>`__
      and `CMake Build Configurations 
      <https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#build-configurations>`__
      for more information on the details of making this switch.
   


.. function:: cpp_attr(ProjectSpecification toolchain)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: Toolchain
   
   User-specified and autopopulated toolchain file values.
   


.. function:: cpp_attr(ProjectSpecification configure_options)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: cpp_map
   
   Project configure options.
   
   This is initialized to an empty map for users to fill.
   


.. function:: cpp_attr(ProjectSpecification compile_options)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   :type: cpp_map
   
   Project compile options.
   
   This is initialized to an empty map for users to fill.
   


.. function:: cpp_constructor(CTOR ProjectSpecification)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   Default constructor for ProjectSpecification object with only
   autopopulated options available.
   
   :param self: ProjectSpecification object constructed.
   :type self: ProjectSpecification
   :returns: ``self`` will be set to the newly constructed
             ``ProjectSpecification`` object.
   :rtype: ProjectSpecification
   


.. function:: cpp_member(hash ProjectSpecification str str)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   Hash the object using the provided hashing algorithm string.
   
   Supported hashing algorithms are specified by the CMake
   ``string(<HASH>`` function defined `here
   <https://cmake.org/cmake/help/latest/command/string.html#hashing>`__.
   
   :param self: ``ProjectSpecification`` object to hash.
   :type self: ProjectSpecification
   :param return_hash: Hashed ``ProjectSpecification``
   :type return_hash: str
   :param hash_type: Hash algorithm to use
   :type hash_type: str
   
   :returns: Hashed ``ProjectSpecification`` object
   :rtype: str
   


.. function:: cpp_member(set_version ProjectSpecification)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   Overload to ``set_version()`` method to catch when the project version
   string is blank.
   
   .. note::
      
      This override is required because of a bug in CMakePPLang.
      Currently, CMakePPLang cannot differentiate between
      ``ProjectSpecification(set_version "${ps_obj}")`` and 
      ``ProjectSpecification(set_version "${ps_obj}" "")``. Sometimes the
      ``PROJECT_VERSION`` variable used in ``__initialize`` to determine
      a default project version is blank, so this ensures we do not get
      an error about not including the version argument for
      ``cpp_member(set_version ProjectSpecification str)`` calls.
   
   :param self: ``ProjectSpecification`` object.
   :type self: ProjectSpecification
   


.. function:: cpp_member(set_version ProjectSpecification str)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   Set the project version variable and splits the version into 
   major, minor, patch, and tweak components.
   
   :param self: ``ProjectSpecification`` object.
   :type self: ProjectSpecification
   :param project_version: Full project version string.
   :type project_version: str
   


.. function:: cpp_member(__initialize ProjectSpecification)


   .. warning:: This is a generic command invocation. It is not a function or macro definition.

   Initialize project attributes with default values.
   
   :param self: ``ProjectSpecification`` object to initialize.
   :type self: ProjectSpecification
   

