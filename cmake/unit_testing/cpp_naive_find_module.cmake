################################################################################
#                        Copyright 2018 Ryan M. Richard                        #
#       Licensed under the Apache License, Version 2.0 (the "License");        #
#       you may not use this file except in compliance with the License.       #
#                   You may obtain a copy of the License at                    #
#                                                                              #
#                  http://www.apache.org/licenses/LICENSE-2.0                  #
#                                                                              #
#     Unless required by applicable law or agreed to in writing, software      #
#      distributed under the License is distributed on an "AS IS" BASIS,       #
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
#     See the License for the specific language governing permissions and      #
#                        limitations under the License.                        #
################################################################################

include_guard()

## Writes a find module for a C++ package that uses CMake naively.
#
# This function will write a file ``FindXXX.cmake`` that can be used as a find
# module for the C++ packages generated by the
# :ref:`cpp_naive_cxx_package-label` and
# :ref:`cpp_install_naive_cxx_package-label` functions.
#
# :param module: An identifier which, after this call, will contain the path to
#     the resulting find module.
# :param prefix: The prefix for where the find module should be written.
#
# :kwargs:
#
#     * *NAME* (``option``) - The name of the dependency. Defaults to "dummy".
#
function(_cpp_naive_find_module _cnfm_module _cnfm_prefix)
    cpp_parse_arguments(_cnfm "${ARGN}" OPTIONS NAME)
    if("${_cnfm_NAME}" STREQUAL "")
        set(_cnfm_NAME dummy)
    endif()
    #Make _cnfm_NAME the uppercase version and _cnfm_name the input case
    set(_cnfm_name ${_cnfm_NAME})
    string(TOUPPER ${_cnfm_name} _cnfm_NAME)
    set(${_cnfm_module} ${_cnfm_prefix}/Find${_cnfm_name}.cmake)
    set(${_cnfm_module} ${${_cnfm_module}} PARENT_SCOPE)

    set(_cnfm_contents
        "find_path(${_cnfm_NAME}_INCLUDE_DIR a.hpp)
find_library(${_cnfm_NAME}_LIBRARY ${_cnfm_name})
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
    ${_cnfm_name} DEFAULT_MSG
    ${_cnfm_NAME}_LIBRARY
    ${_cnfm_NAME}_INCLUDE_DIR
)
set(${_cnfm_NAME}_INCLUDE_DIRS \${${_cnfm_NAME}_INCLUDE_DIR})
set(${_cnfm_NAME}_LIBRARIES \${${_cnfm_NAME}_LIBRARY})
"
        )
    file(WRITE ${${_cnfm_module}} "${_cnfm_contents}")
endfunction()
